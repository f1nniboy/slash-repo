#!/bin/sh -e

# Instruct the compiler to trim absolute paths in resulting binaries and instead
# change them to relative paths ($PWD/... ./...).
export RUSTFLAGS="${RUSTFLAGS} --remap-path-prefix=${PWD}=."

# This package mimics the download process of rust's 'x.py'
# bootstrap library to allow for the removal of the internet
# connection requirement per build.
{
	cache_dir=build/cache/2021-07-29
	mkdir -p "${cache_dir}"

	for tarball in *.tar.xz\?no-extract; do
		mv -f "${tarball}" "${cache_dir}/${tarball%%\?no-extract}"
	done
}

# Apply the LibreSSL patch.
patch -p1 < libressl.patch

# Set shared linking as the default.
for file in \
	compiler/rustc_target/src/spec/linux_musl_base.rs \
	vendor/rustc-ap-rustc_target/src/spec/linux_musl_base.rs
do
	sed -i 's/\(crt_static_default = \)true/\1false/' "${file}"
done

# Ignore checksums of files modified above.
sed -i 's/\("files":{\)[^}]*/\1/' vendor/rustc-ap-rustc_target/.cargo-checksum.json
sed -i 's/\("files":{\)[^}]*/\1/' vendor/openssl-sys/.cargo-checksum.json

cat > config.toml <<EOF
[llvm]
link-shared       = true
skip-rebuild      = true

[build]
build             = "x86_64-unknown-linux-musl"
host              = [ "x86_64-unknown-linux-musl" ]
target            = [ "x86_64-unknown-linux-musl" ]
docs              = false
compiler-docs     = false
extended          = true
submodules        = false
python            = "python3"
locked-deps       = true
vendor            = true
tools             = ["cargo", "rustfmt", "src"]
sanitizers        = false
profiler          = false
full-bootstrap    = false

[install]
prefix = "/usr"

[rust]
backtrace         = false
channel           = "nightly"
codegen-tests     = false
codegen-units-std = 0
codegen-units     = 0
debug             = false
debug-assertions  = false
debuginfo-level   = 0
incremental       = false
jemalloc          = false
rpath             = false
dist-src          = false
llvm-libunwind    = "system"

[dist]
src-tarball       = false

[target.x86_64-unknown-linux-musl]
llvm-config       = "/usr/bin/llvm-config"
crt-static        = false
sanitizers        = false
EOF


###
# Rust's bootstrap binaries need 'libgcc_s.so', which doesn't
# exist on a LLVM-only system. This hack creates it as an alias
# to 'libunwind.so'.
mkdir -p libgcc

printf 'INPUT(-lunwind)\n' > \
	libgcc/libgcc_s.so

ln -sf "${SLASH_ROOT}/usr/lib/libunwind.so.1" \
	libgcc/libgcc_s.so.1

export \
	LD_LIBRARY_PATH="${PWD}/libgcc:${LD_LIBRARY_PATH}" \
	LIBRARY_PATH="${PWD}/libgcc:${LIBRARY_PATH}"
###


python3 ./x.py build -j "$(nproc)"
DESTDIR="$1" python3 ./x.py install

rm -rf \
	"$1/usr/lib/rustlib/src/" \
	"$1/usr/share/doc" \
	"$1/usr/share/zsh" \
	"$1/usr/lib/rustlib/uninstall.sh"
